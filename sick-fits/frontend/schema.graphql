# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordFailure | UserAuthenticationWithPasswordSuccess

" A keystone list "
type CartItem {
    id: ID!
    product: Product
    quantity: Int
    user: User
}

type CloudinaryImage_File {
    encoding: String
    filename: String
    id: ID
    mimetype: String
    originalFilename: String
    path: String
    publicUrl: String
    publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

type KeystoneAdminMeta {
    enableSessionItem: Boolean!
    enableSignout: Boolean!
    list(key: String!): KeystoneAdminUIListMeta
    lists: [KeystoneAdminUIListMeta!]!
}

type KeystoneAdminUIFieldMeta {
    createView: KeystoneAdminUIFieldMetaCreateView!
    customViewsHash: String
    fieldMeta: JSON
    isOrderable: Boolean!
    itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
    label: String!
    listView: KeystoneAdminUIFieldMetaListView!
    path: String!
    viewsHash: String!
}

type KeystoneAdminUIFieldMetaCreateView {
    fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
    fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
    fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIListMeta {
    description: String
    fields: [KeystoneAdminUIFieldMeta!]!
    hideCreate: Boolean!
    hideDelete: Boolean!
    initialColumns: [String!]!
    initialSort: KeystoneAdminUISort
    isHidden: Boolean!
    itemQueryName: String!
    key: String!
    label: String!
    labelField: String!
    listQueryName: String!
    pageSize: Int!
    path: String!
    plural: String!
    singular: String!
}

type KeystoneAdminUISort {
    direction: KeystoneAdminUISortDirection!
    field: String!
}

type KeystoneMeta {
    adminMeta: KeystoneAdminMeta!
}

type Mutation {
    addToCart(productId: ID): CartItem
    authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
    " Create a single CartItem item. "
    createCartItem(data: CartItemCreateInput): CartItem
    " Create multiple CartItem items. "
    createCartItems(data: [CartItemsCreateInput]): [CartItem]
    createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
    " Create a single Product item. "
    createProduct(data: ProductCreateInput): Product
    " Create a single ProductImage item. "
    createProductImage(data: ProductImageCreateInput): ProductImage
    " Create multiple ProductImage items. "
    createProductImages(data: [ProductImagesCreateInput]): [ProductImage]
    " Create multiple Product items. "
    createProducts(data: [ProductsCreateInput]): [Product]
    " Create a single User item. "
    createUser(data: UserCreateInput): User
    " Create multiple User items. "
    createUsers(data: [UsersCreateInput]): [User]
    " Delete a single CartItem item by ID. "
    deleteCartItem(id: ID!): CartItem
    " Delete multiple CartItem items by ID. "
    deleteCartItems(ids: [ID!]): [CartItem]
    " Delete a single Product item by ID. "
    deleteProduct(id: ID!): Product
    " Delete a single ProductImage item by ID. "
    deleteProductImage(id: ID!): ProductImage
    " Delete multiple ProductImage items by ID. "
    deleteProductImages(ids: [ID!]): [ProductImage]
    " Delete multiple Product items by ID. "
    deleteProducts(ids: [ID!]): [Product]
    " Delete a single User item by ID. "
    deleteUser(id: ID!): User
    " Delete multiple User items by ID. "
    deleteUsers(ids: [ID!]): [User]
    endSession: Boolean!
    redeemUserPasswordResetToken(email: String!, password: String!, token: String!): RedeemUserPasswordResetTokenResult
    sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
    " Update a single CartItem item by ID. "
    updateCartItem(data: CartItemUpdateInput, id: ID!): CartItem
    " Update multiple CartItem items by ID. "
    updateCartItems(data: [CartItemsUpdateInput]): [CartItem]
    " Update a single Product item by ID. "
    updateProduct(data: ProductUpdateInput, id: ID!): Product
    " Update a single ProductImage item by ID. "
    updateProductImage(data: ProductImageUpdateInput, id: ID!): ProductImage
    " Update multiple ProductImage items by ID. "
    updateProductImages(data: [ProductImagesUpdateInput]): [ProductImage]
    " Update multiple Product items by ID. "
    updateProducts(data: [ProductsUpdateInput]): [Product]
    " Update a single User item by ID. "
    updateUser(data: UserUpdateInput, id: ID!): User
    " Update multiple User items by ID. "
    updateUsers(data: [UsersUpdateInput]): [User]
}

" A keystone list "
type Product {
    description: String
    id: ID!
    name: String
    photo: ProductImage
    price: Int
    status: String
}

" A keystone list "
type ProductImage {
    altText: String
    id: ID!
    image: CloudinaryImage_File
    product: Product
}

type Query {
    " Search for the CartItem item with the matching ID. "
    CartItem(where: CartItemWhereUniqueInput!): CartItem
    " Search for the Product item with the matching ID. "
    Product(where: ProductWhereUniqueInput!): Product
    " Search for the ProductImage item with the matching ID. "
    ProductImage(where: ProductImageWhereUniqueInput!): ProductImage
    " Search for the User item with the matching ID. "
    User(where: UserWhereUniqueInput!): User
    " Retrieve the meta-data for the CartItem list. "
    _CartItemsMeta: _ListMeta
    " Retrieve the meta-data for the ProductImage list. "
    _ProductImagesMeta: _ListMeta
    " Retrieve the meta-data for the Product list. "
    _ProductsMeta: _ListMeta
    " Retrieve the meta-data for the User list. "
    _UsersMeta: _ListMeta
    " Perform a meta-query on all CartItem items which match the where clause. "
    _allCartItemsMeta(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortCartItemsBy!], where: CartItemWhereInput): _QueryMeta
    " Perform a meta-query on all ProductImage items which match the where clause. "
    _allProductImagesMeta(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortProductImagesBy!], where: ProductImageWhereInput): _QueryMeta
    " Perform a meta-query on all Product items which match the where clause. "
    _allProductsMeta(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortProductsBy!], where: ProductWhereInput): _QueryMeta
    " Perform a meta-query on all User items which match the where clause. "
    _allUsersMeta(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortUsersBy!], where: UserWhereInput): _QueryMeta
    " Retrieve the meta-data for all lists. "
    _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]
    " Search for all CartItem items which match the where clause. "
    allCartItems(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortCartItemsBy!], where: CartItemWhereInput): [CartItem]
    " Search for all ProductImage items which match the where clause. "
    allProductImages(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortProductImagesBy!], where: ProductImageWhereInput): [ProductImage]
    " Search for all Product items which match the where clause. "
    allProducts(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortProductsBy!], where: ProductWhereInput): [Product]
    " Search for all User items which match the where clause. "
    allUsers(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortUsersBy!], where: UserWhereInput): [User]
    "The version of the Keystone application serving this API."
    appVersion: String
    authenticatedItem: AuthenticatedItem
    keystone: KeystoneMeta!
    validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
}

type RedeemUserPasswordResetTokenResult {
    code: PasswordResetRedemptionErrorCode!
    message: String!
}

type SendUserPasswordResetLinkResult {
    code: PasswordResetRequestErrorCode!
    message: String!
}

" A keystone list "
type User {
    _cartMeta(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortCartItemsBy!], where: CartItemWhereInput): _QueryMeta
    cart(first: Int, orderBy: String, search: String, skip: Int, sortBy: [SortCartItemsBy!], where: CartItemWhereInput): [CartItem!]!
    email: String
    id: ID!
    magicAuthIssuedAt: String
    magicAuthRedeemedAt: String
    magicAuthToken_is_set: Boolean
    name: String
    passwordResetIssuedAt: String
    passwordResetRedeemedAt: String
    passwordResetToken_is_set: Boolean
    password_is_set: Boolean
}

type UserAuthenticationWithPasswordFailure {
    code: PasswordAuthErrorCode!
    message: String!
}

type UserAuthenticationWithPasswordSuccess {
    item: User!
    sessionToken: String!
}

type ValidateUserPasswordResetTokenResult {
    code: PasswordResetRedemptionErrorCode!
    message: String!
}

type _ListAccess {
    """

    Access Control settings for the currently logged in (or anonymous)
    user when performing 'auth' operations.
    """
    auth: JSON
    """

    Access Control settings for the currently logged in (or anonymous)
    user when performing 'create' operations.
    NOTE: 'create' can only return a Boolean.
    It is not possible to specify a declarative Where clause for this
    operation
    """
    create: Boolean
    """

    Access Control settings for the currently logged in (or anonymous)
    user when performing 'delete' operations.
    """
    delete: JSON
    """

    Access Control settings for the currently logged in (or anonymous)
    user when performing 'read' operations.
    """
    read: JSON
    """

    Access Control settings for the currently logged in (or anonymous)
    user when performing 'update' operations.
    """
    update: JSON
}

type _ListInputTypes {
    "Create mutation input type name"
    createInput: String
    "Create many mutation input type name"
    createManyInput: String
    "Update mutation name input"
    updateInput: String
    "Update many mutation name input"
    updateManyInput: String
    "Input type for matching multiple items"
    whereInput: String
    "Input type for matching a unique item"
    whereUniqueInput: String
}

type _ListMeta {
    "Access control configuration for the currently authenticated request"
    access: _ListAccess
    "The list's user-facing description"
    description: String
    "The Keystone list key"
    key: String
    "The list's display name in the Admin UI"
    label: String
    "The Keystone List name"
    name: String @deprecated(reason: "Use `key` instead")
    "The list's data path"
    path: String
    "The list's plural display name"
    plural: String
    "Information on the generated GraphQL schema"
    schema: _ListSchema
    "The list's singular display name"
    singular: String
}

type _ListMutations {
    "Create mutation name"
    create: String
    "Create many mutation name"
    createMany: String
    "Delete mutation name"
    delete: String
    "Delete many mutation name"
    deleteMany: String
    "Update mutation name"
    update: String
    "Update many mutation name"
    updateMany: String
}

type _ListQueries {
    "Single-item query name"
    item: String
    "All-items query name"
    list: String
    "List metadata query name"
    meta: String
}

type _ListSchema {
    "Information about fields defined on this list"
    fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]
    "Top-level GraphQL input types"
    inputTypes: _ListInputTypes
    "Top-level GraphQL mutation names"
    mutations: _ListMutations
    """

    Top level GraphQL query names which either return this type, or
    provide aggregate information about this type
    """
    queries: _ListQueries
    """

    Information about fields on other types which return this type, or
    provide aggregate information about this type
    """
    relatedFields: [_ListSchemaRelatedFields]
    "The typename as used in GraphQL queries"
    type: String
}

type _ListSchemaFields {
    "The name of the field in its list"
    name: String @deprecated(reason: "Use `path` instead")
    "The path of the field in its list"
    path: String
    "The field type (ie, Checkbox, Text, etc)"
    type: String
}

type _ListSchemaRelatedFields {
    "A list of GraphQL field names"
    fields: [String]
    "The typename as used in GraphQL queries"
    type: String
}

type _QueryMeta {
    count: Int
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
    edit
    hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
    edit
    hidden
    read
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
    hidden
    read
}

enum KeystoneAdminUISortDirection {
    ASC
    DESC
}

enum PasswordAuthErrorCode {
    FAILURE
    IDENTITY_NOT_FOUND
    MULTIPLE_IDENTITY_MATCHES
    SECRET_MISMATCH
    SECRET_NOT_SET
}

enum PasswordResetRedemptionErrorCode {
    FAILURE
    IDENTITY_NOT_FOUND
    MULTIPLE_IDENTITY_MATCHES
    TOKEN_EXPIRED
    TOKEN_MISMATCH
    TOKEN_NOT_SET
    TOKEN_REDEEMED
}

enum PasswordResetRequestErrorCode {
    IDENTITY_NOT_FOUND
    MULTIPLE_IDENTITY_MATCHES
}

enum SortCartItemsBy {
    id_ASC
    id_DESC
    product_ASC
    product_DESC
    quantity_ASC
    quantity_DESC
    user_ASC
    user_DESC
}

enum SortProductImagesBy {
    altText_ASC
    altText_DESC
    id_ASC
    id_DESC
    product_ASC
    product_DESC
}

enum SortProductsBy {
    description_ASC
    description_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    photo_ASC
    photo_DESC
    price_ASC
    price_DESC
    status_ASC
    status_DESC
}

enum SortUsersBy {
    cart_ASC
    cart_DESC
    email_ASC
    email_DESC
    id_ASC
    id_DESC
    magicAuthIssuedAt_ASC
    magicAuthIssuedAt_DESC
    magicAuthRedeemedAt_ASC
    magicAuthRedeemedAt_DESC
    name_ASC
    name_DESC
    passwordResetIssuedAt_ASC
    passwordResetIssuedAt_DESC
    passwordResetRedeemedAt_ASC
    passwordResetRedeemedAt_DESC
}

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload

input CartItemCreateInput {
    product: ProductRelateToOneInput
    quantity: Int
    user: UserRelateToOneInput
}

input CartItemRelateToManyInput {
    connect: [CartItemWhereUniqueInput]
    create: [CartItemCreateInput]
    disconnect: [CartItemWhereUniqueInput]
    disconnectAll: Boolean
}

input CartItemUpdateInput {
    product: ProductRelateToOneInput
    quantity: Int
    user: UserRelateToOneInput
}

input CartItemWhereInput {
    AND: [CartItemWhereInput]
    OR: [CartItemWhereInput]
    id: ID
    id_in: [ID]
    id_not: ID
    id_not_in: [ID]
    product: ProductWhereInput
    product_is_null: Boolean
    quantity: Int
    quantity_gt: Int
    quantity_gte: Int
    quantity_in: [Int]
    quantity_lt: Int
    quantity_lte: Int
    quantity_not: Int
    quantity_not_in: [Int]
    user: UserWhereInput
    user_is_null: Boolean
}

input CartItemWhereUniqueInput {
    id: ID!
}

input CartItemsCreateInput {
    data: CartItemCreateInput
}

input CartItemsUpdateInput {
    data: CartItemUpdateInput
    id: ID!
}

"""

Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
    angle: String
    aspect_ratio: String
    background: String
    border: String
    color: String
    color_space: String
    crop: String
    default_image: String
    delay: String
    density: String
    dpr: String
    effect: String
    fetch_format: String
    flags: String
    format: String
    gravity: String
    height: String
    opacity: String
    overlay: String
    page: String
    " Rewrites the filename to be this pretty string. Do not include `/` or `.` "
    prettyName: String
    quality: String
    radius: String
    transformation: String
    underlay: String
    width: String
    x: String
    y: String
    zoom: String
}

input CreateInitialUserInput {
    email: String
    name: String
    password: String
}

input ProductCreateInput {
    description: String
    name: String
    photo: ProductImageRelateToOneInput
    price: Int
    status: String
}

input ProductImageCreateInput {
    altText: String
    image: Upload
    product: ProductRelateToOneInput
}

input ProductImageRelateToOneInput {
    connect: ProductImageWhereUniqueInput
    create: ProductImageCreateInput
    disconnect: ProductImageWhereUniqueInput
    disconnectAll: Boolean
}

input ProductImageUpdateInput {
    altText: String
    image: Upload
    product: ProductRelateToOneInput
}

input ProductImageWhereInput {
    AND: [ProductImageWhereInput]
    OR: [ProductImageWhereInput]
    altText: String
    altText_contains: String
    altText_contains_i: String
    altText_ends_with: String
    altText_ends_with_i: String
    altText_i: String
    altText_in: [String]
    altText_not: String
    altText_not_contains: String
    altText_not_contains_i: String
    altText_not_ends_with: String
    altText_not_ends_with_i: String
    altText_not_i: String
    altText_not_in: [String]
    altText_not_starts_with: String
    altText_not_starts_with_i: String
    altText_starts_with: String
    altText_starts_with_i: String
    id: ID
    id_in: [ID]
    id_not: ID
    id_not_in: [ID]
    image: String
    image_in: [String]
    image_not: String
    image_not_in: [String]
    product: ProductWhereInput
    product_is_null: Boolean
}

input ProductImageWhereUniqueInput {
    id: ID!
}

input ProductImagesCreateInput {
    data: ProductImageCreateInput
}

input ProductImagesUpdateInput {
    data: ProductImageUpdateInput
    id: ID!
}

input ProductRelateToOneInput {
    connect: ProductWhereUniqueInput
    create: ProductCreateInput
    disconnect: ProductWhereUniqueInput
    disconnectAll: Boolean
}

input ProductUpdateInput {
    description: String
    name: String
    photo: ProductImageRelateToOneInput
    price: Int
    status: String
}

input ProductWhereInput {
    AND: [ProductWhereInput]
    OR: [ProductWhereInput]
    description: String
    description_contains: String
    description_contains_i: String
    description_ends_with: String
    description_ends_with_i: String
    description_i: String
    description_in: [String]
    description_not: String
    description_not_contains: String
    description_not_contains_i: String
    description_not_ends_with: String
    description_not_ends_with_i: String
    description_not_i: String
    description_not_in: [String]
    description_not_starts_with: String
    description_not_starts_with_i: String
    description_starts_with: String
    description_starts_with_i: String
    id: ID
    id_in: [ID]
    id_not: ID
    id_not_in: [ID]
    name: String
    name_contains: String
    name_contains_i: String
    name_ends_with: String
    name_ends_with_i: String
    name_i: String
    name_in: [String]
    name_not: String
    name_not_contains: String
    name_not_contains_i: String
    name_not_ends_with: String
    name_not_ends_with_i: String
    name_not_i: String
    name_not_in: [String]
    name_not_starts_with: String
    name_not_starts_with_i: String
    name_starts_with: String
    name_starts_with_i: String
    photo: ProductImageWhereInput
    photo_is_null: Boolean
    price: Int
    price_gt: Int
    price_gte: Int
    price_in: [Int]
    price_lt: Int
    price_lte: Int
    price_not: Int
    price_not_in: [Int]
    status: String
    status_contains: String
    status_contains_i: String
    status_ends_with: String
    status_ends_with_i: String
    status_i: String
    status_in: [String]
    status_not: String
    status_not_contains: String
    status_not_contains_i: String
    status_not_ends_with: String
    status_not_ends_with_i: String
    status_not_i: String
    status_not_in: [String]
    status_not_starts_with: String
    status_not_starts_with_i: String
    status_starts_with: String
    status_starts_with_i: String
}

input ProductWhereUniqueInput {
    id: ID!
}

input ProductsCreateInput {
    data: ProductCreateInput
}

input ProductsUpdateInput {
    data: ProductUpdateInput
    id: ID!
}

input UserCreateInput {
    cart: CartItemRelateToManyInput
    email: String
    magicAuthIssuedAt: String
    magicAuthRedeemedAt: String
    magicAuthToken: String
    name: String
    password: String
    passwordResetIssuedAt: String
    passwordResetRedeemedAt: String
    passwordResetToken: String
}

input UserRelateToOneInput {
    connect: UserWhereUniqueInput
    create: UserCreateInput
    disconnect: UserWhereUniqueInput
    disconnectAll: Boolean
}

input UserUpdateInput {
    cart: CartItemRelateToManyInput
    email: String
    magicAuthIssuedAt: String
    magicAuthRedeemedAt: String
    magicAuthToken: String
    name: String
    password: String
    passwordResetIssuedAt: String
    passwordResetRedeemedAt: String
    passwordResetToken: String
}

input UserWhereInput {
    AND: [UserWhereInput]
    OR: [UserWhereInput]
    " condition must be true for all nodes "
    cart_every: CartItemWhereInput
    " condition must be false for all nodes "
    cart_none: CartItemWhereInput
    " condition must be true for at least 1 node "
    cart_some: CartItemWhereInput
    email: String
    email_contains: String
    email_contains_i: String
    email_ends_with: String
    email_ends_with_i: String
    email_i: String
    email_in: [String]
    email_not: String
    email_not_contains: String
    email_not_contains_i: String
    email_not_ends_with: String
    email_not_ends_with_i: String
    email_not_i: String
    email_not_in: [String]
    email_not_starts_with: String
    email_not_starts_with_i: String
    email_starts_with: String
    email_starts_with_i: String
    id: ID
    id_in: [ID]
    id_not: ID
    id_not_in: [ID]
    magicAuthIssuedAt: String
    magicAuthIssuedAt_gt: String
    magicAuthIssuedAt_gte: String
    magicAuthIssuedAt_in: [String]
    magicAuthIssuedAt_lt: String
    magicAuthIssuedAt_lte: String
    magicAuthIssuedAt_not: String
    magicAuthIssuedAt_not_in: [String]
    magicAuthRedeemedAt: String
    magicAuthRedeemedAt_gt: String
    magicAuthRedeemedAt_gte: String
    magicAuthRedeemedAt_in: [String]
    magicAuthRedeemedAt_lt: String
    magicAuthRedeemedAt_lte: String
    magicAuthRedeemedAt_not: String
    magicAuthRedeemedAt_not_in: [String]
    magicAuthToken_is_set: Boolean
    name: String
    name_contains: String
    name_contains_i: String
    name_ends_with: String
    name_ends_with_i: String
    name_i: String
    name_in: [String]
    name_not: String
    name_not_contains: String
    name_not_contains_i: String
    name_not_ends_with: String
    name_not_ends_with_i: String
    name_not_i: String
    name_not_in: [String]
    name_not_starts_with: String
    name_not_starts_with_i: String
    name_starts_with: String
    name_starts_with_i: String
    passwordResetIssuedAt: String
    passwordResetIssuedAt_gt: String
    passwordResetIssuedAt_gte: String
    passwordResetIssuedAt_in: [String]
    passwordResetIssuedAt_lt: String
    passwordResetIssuedAt_lte: String
    passwordResetIssuedAt_not: String
    passwordResetIssuedAt_not_in: [String]
    passwordResetRedeemedAt: String
    passwordResetRedeemedAt_gt: String
    passwordResetRedeemedAt_gte: String
    passwordResetRedeemedAt_in: [String]
    passwordResetRedeemedAt_lt: String
    passwordResetRedeemedAt_lte: String
    passwordResetRedeemedAt_not: String
    passwordResetRedeemedAt_not_in: [String]
    passwordResetToken_is_set: Boolean
    password_is_set: Boolean
}

input UserWhereUniqueInput {
    id: ID!
}

input UsersCreateInput {
    data: UserCreateInput
}

input UsersUpdateInput {
    data: UserUpdateInput
    id: ID!
}

input _ListSchemaFieldsInput {
    type: String
}

input _ksListsMetaInput {
    "Whether this is an auxiliary helper list"
    auxiliary: Boolean
    key: String
}
